<?php
/**
 * ============================================================================
 * core/Database.php
 * ============================================================================
 * ‚ú® CLASSE DE CONNEXION √Ä LA BASE DE DONN√âES (PDO)
 * 
 * ‚û§ R√¥le :
 *   Cette classe centralise la connexion √† la base de donn√©es MySQL.
 *   Elle utilise PDO (PHP Data Objects) pour plus de s√©curit√© et de souplesse.
 * 
 * ‚û§ Avantages :
 *   ‚úÖ Connexion unique et r√©utilisable (Singleton)
 *   ‚úÖ S√©curit√© : requ√™tes pr√©par√©es, gestion des erreurs
 *   ‚úÖ Compatibilit√© : PDO fonctionne aussi avec d'autres SGBD (PostgreSQL, SQLite, etc.)
 * ============================================================================
 */

class Database {

    /**
     * --------------------------------------------------------------------------
     * üîí Propri√©t√© statique $pdo
     * --------------------------------------------------------------------------
     * ‚û§ Elle stocke **l‚Äôunique instance** de connexion PDO pour toute l‚Äôapplication.
     * 
     * Pourquoi ?
     * ‚Üí Pour √©viter de rouvrir une nouvelle connexion √† chaque requ√™te SQL.
     * ‚Üí Cela am√©liore les performances et r√©duit la charge du serveur.
     * 
     * Le "?" signifie que la variable peut √™tre soit un objet PDO, soit NULL.
     */
    private static ?PDO $pdo = null;


    /**
     * --------------------------------------------------------------------------
     * ‚öôÔ∏è M√©thode statique getInstance()
     * --------------------------------------------------------------------------
     * ‚û§ Retourne une instance unique de PDO.
     * ‚û§ Si elle n‚Äôexiste pas encore, elle est cr√©√©e une seule fois.
     * 
     * Exemple d‚Äôutilisation :
     *   $db = Database::getInstance();
     *   $stmt = $db->query("SELECT * FROM users");
     */
    public static function getInstance(): PDO {

        // Si la connexion n‚Äôa pas encore √©t√© cr√©√©e...
        if (self::$pdo === null) {

            // ----------------------------------------------------------
            // üîß Construction de la cha√Æne DSN (Data Source Name)
            // ----------------------------------------------------------
            // Format DSN pour MySQL :
            //   mysql:host=HOTE;dbname=NOM_BDD;charset=ENCODAGE
            //
            // Les constantes (DB_HOST, DB_NAME, etc.) sont d√©finies dans config.php
            $dsn = 'mysql:host=' . DB_HOST . ';dbname=' . DB_NAME . ';charset=' . DB_CHARSET;

            // ----------------------------------------------------------
            // üß© Cr√©ation de l'objet PDO avec ses options
            // ----------------------------------------------------------
            // PDO prend 4 arguments :
            //   1. Le DSN complet (ex: mysql:host=127.0.0.1;dbname=mon_mvc;charset=utf8mb4)
            //   2. Le nom d'utilisateur de la BDD (DB_USER)
            //   3. Le mot de passe (DB_PASS)
            //   4. Un tableau d‚Äôoptions suppl√©mentaires
            self::$pdo = new PDO($dsn, DB_USER, DB_PASS, [

                // ------------------------------------------------------
                // üö® Mode d‚Äôaffichage des erreurs :
                // ------------------------------------------------------
                // PDO::ERRMODE_EXCEPTION ‚Üí Les erreurs d√©clenchent des exceptions
                // Cela permet de les "attraper" avec try/catch et de les g√©rer proprement.
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,

                // ------------------------------------------------------
                // üì¶ Mode de r√©cup√©ration par d√©faut :
                // ------------------------------------------------------
                // FETCH_ASSOC ‚Üí les r√©sultats sont renvoy√©s sous forme de tableau associatif
                // Exemple : ['id' => 1, 'nom' => 'S√©bastien']
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,

                // ------------------------------------------------------
                // üó£Ô∏è Commande d‚Äôinitialisation MySQL :
                // ------------------------------------------------------
                // Permet d‚Äô√™tre s√ªr que la connexion utilise bien le bon encodage.
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES " . DB_CHARSET
            ]);
        }

        // Si la connexion existait d√©j√†, on la r√©utilise simplement
        return self::$pdo;
    }
}
