<?php
/**
 * ============================================================================
 * core/Controller.php
 * ============================================================================
 * ‚ú® CLASSE DE BASE POUR TOUS LES CONTR√îLEURS DU FRAMEWORK MVC ‚ú®
 * 
 * ‚û§ R√¥le :
 *   Cette classe sert de **contr√¥leur parent** √† tous les autres contr√¥leurs.
 *   Elle fournit des m√©thodes utilitaires (helpers) pour :
 *     ‚úÖ afficher une vue,
 *     ‚úÖ rediriger vers une autre page,
 *     ‚úÖ v√©rifier si le formulaire est en POST,
 *     ‚úÖ g√©rer la s√©curit√© des formulaires via un token CSRF.
 * 
 * ‚û§ Exemple :
 *   class HomeController extends Controller { ... }
 * ============================================================================
 */

class Controller {

    /**
     * --------------------------------------------------------------------------
     * üñºÔ∏è M√©thode view()
     * --------------------------------------------------------------------------
     * ‚û§ Permet d‚Äôafficher une page (vue) compl√®te avec un header et un footer.
     * 
     * @param string $view ‚Äî le nom du fichier de vue (ex: 'home/index')
     * @param array  $data ‚Äî tableau de donn√©es √† transmettre √† la vue
     * 
     * Exemple :
     *   $this->view('home/index', ['title' => 'Accueil']);
     *   ‚Üí charge : 
     *       /views/layout/header.php
     *       /views/home/index.php
     *       /views/layout/footer.php
     */
    protected function view(string $view, array $data = []) {

        // üîπ extract() transforme le tableau associatif en variables individuelles :
        // ['title' => 'Accueil'] devient $title = 'Accueil';
        extract($data);

        // üîπ Inclusion du header commun (mise en page globale)
        include __DIR__ . '/../views/layout/header.php';

        // üîπ Inclusion de la vue principale (contenu sp√©cifique √† la page)
        include __DIR__ . '/../views/' . $view . '.php';

        // üîπ Inclusion du footer commun
        include __DIR__ . '/../views/layout/footer.php';
    }


    /**
     * --------------------------------------------------------------------------
     * üöÄ M√©thode redirect()
     * --------------------------------------------------------------------------
     * ‚û§ Permet de rediriger l‚Äôutilisateur vers une autre route de ton site.
     * 
     * @param string $path ‚Äî chemin relatif √† la racine (ex: 'home/index')
     * 
     * Exemple :
     *   $this->redirect('articles');
     *   ‚Üí redirige vers BASE_URL/articles
     */
    protected function redirect(string $path) {

        // On nettoie les "/" pour √©viter les doublons dans l‚ÄôURL finale
        $url = rtrim(BASE_URL, '/') . '/' . ltrim($path, '/');

        // Envoi d‚Äôun en-t√™te HTTP de redirection
        header('Location: ' . $url);

        // Arr√™te l‚Äôex√©cution du script apr√®s la redirection
        exit;
    }


    /**
     * --------------------------------------------------------------------------
     * üì¨ M√©thode isPost()
     * --------------------------------------------------------------------------
     * ‚û§ V√©rifie si la requ√™te actuelle est une soumission de formulaire en POST.
     * 
     * @return bool ‚Äî true si la m√©thode est POST, sinon false.
     * 
     * Exemple :
     *   if ($this->isPost()) { ... }  // traitement du formulaire
     */
    protected function isPost(): bool {

        // $_SERVER['REQUEST_METHOD'] contient la m√©thode HTTP utilis√©e (GET, POST, etc.)
        return ($_SERVER['REQUEST_METHOD'] ?? 'GET') === 'POST';
    }


    /**
     * --------------------------------------------------------------------------
     * üîê M√©thode csrfToken()
     * --------------------------------------------------------------------------
     * ‚û§ G√©n√®re un "token CSRF" unique pour s√©curiser les formulaires.
     * 
     * CSRF = Cross-Site Request Forgery
     * ‚Üí Ce token emp√™che qu‚Äôun pirate soumette un formulaire √† ta place.
     * 
     * Fonctionnement :
     *   1Ô∏è‚É£ Si aucun token CSRF n‚Äôexiste en session ‚Üí on en cr√©e un al√©atoire.
     *   2Ô∏è‚É£ On le renvoie pour pouvoir l‚Äôins√©rer dans le formulaire (champ cach√©).
     * 
     * Exemple dans une vue :
     *   <input type="hidden" name="csrf" value="<?= $this->csrfToken(); ?>">
     */
    protected function csrfToken(): string {

        // Si la session n‚Äôest pas active, on la d√©marre
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();

        // Si aucun token CSRF n‚Äôexiste encore, on en g√©n√®re un nouveau
        if (empty($_SESSION['csrf'])) {
            // random_bytes(16) cr√©e une cha√Æne binaire al√©atoire tr√®s s√ªre
            // bin2hex() la transforme en cha√Æne hexad√©cimale lisible
            $_SESSION['csrf'] = bin2hex(random_bytes(16));
        }

        // Retourne le token actuel
        return $_SESSION['csrf'];
    }


    /**
     * --------------------------------------------------------------------------
     * ‚úÖ M√©thode checkCsrf()
     * --------------------------------------------------------------------------
     * ‚û§ V√©rifie si le token CSRF re√ßu depuis le formulaire est bien valide.
     * 
     * @param string $token ‚Äî le token re√ßu via le formulaire (POST)
     * @return bool ‚Äî true si le token est correct, false sinon.
     * 
     * Exemple :
     *   if (!$this->checkCsrf($_POST['csrf'])) {
     *       die('Erreur CSRF');
     *   }
     */
    protected function checkCsrf(string $token): bool {

        // S‚Äôassure que la session est active
        if (session_status() !== PHP_SESSION_ACTIVE) session_start();

        // V√©rifie que :
        //   1Ô∏è‚É£ un token existe en session
        //   2Ô∏è‚É£ il correspond exactement √† celui envoy√© (s√©curit√© hash_equals)
        return isset($_SESSION['csrf']) && hash_equals($_SESSION['csrf'], $token);
    }
}
