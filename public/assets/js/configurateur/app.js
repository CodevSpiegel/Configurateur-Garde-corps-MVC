/**
 * app.js ‚Äî Moteur universel de configurateur pilot√© par steps.js
 * -----------------------------------------------------------------------------
 * Id√©e g√©n√©rale :
 * - Tu fournis un "steps.js" (tableau d'√©tapes ou objet) d√©crivant le sc√©nario :
 *     [{ id, label, description, fields: [...], preview, defaultPreview, showIf, validate, ...}, ...]
 * - Chaque √©tape (step) contient des champs (fields) avec leur type (choice, number, text, boolean, range)
 * - Le moteur :
 *     1) Normalise steps (en Array)
 *     2) G√®re un √©tat "selection" (cl√©/valeur par field.id)
 *     3) Rend la sidebar, l‚Äô√©tape courante, et la navigation (Pr√©c√©dent/Suivant/Terminer)
 *     4) Applique les conditions d‚Äôaffichage (showIf), la validation (validate), et le preview
 * - Le tout est mont√© dans un conteneur "mount" (par d√©faut #app) + 4 zones fixes :
 *     #cfg-preview, #cfg-steps, #cfg-fields, #cfg-nav
 *
 * Remarque :
 * - Le code est √©crit vanilla (sans framework) pour rester portable et minimal.
 */

import {
  el, text, clamp, escapeHtml,
  normalizeSteps, normalizeOptions,
  resolveMaybeFn, resolvePredicate
} from "./core/utils.js";

import { renderSidebar, renderStep, renderNav, makePredicates } from "./core/renderers.js";

/**
 * Fonction principale d‚Äôinitialisation du configurateur.
 *
 * @param {Object}   params
 * @param {Array|Object} params.steps   - D√©finition des √©tapes (Array OU Object)
 * @param {Object}   [params.data={}]   - Donn√©es externes (catalogues, tarifs, etc.)
 * @param {HTMLElement} [params.mount=document.getElementById("app")] - √âl√©ment racine o√π rendre l‚ÄôUI
 * @param {number}   [params.startAt=0] - Index de l‚Äô√©tape de d√©part (0 = premi√®re √©tape)
 */
export function initConfigurator({
  steps,                                   // steps peut √™tre un Array ou un Object (voir normalizeSteps)
  data = {},                               // Donn√©es externes (optionnelles)
  mount = document.getElementById("app"),  // √âl√©ment racine par d√©faut : <div id="app"></div>
  startAt = 0,                             // √âtape initiale
})
{
  // --- S√©curit√© : s‚Äôassurer que le conteneur existe, sinon on arr√™te proprement.
  if (!mount) throw new Error("‚ùå √âl√©ment 'mount' introuvable. Ajouter <div id=\"app\"></div>.");

  // --- Hack utile : certains navigateurs (Chrome) soumettent un <form>
  //     si un <button> est cliqu√© sans type explicite. On bloque toute soumission par d√©faut.
  mount.addEventListener('submit', (ev) => {
    ev.preventDefault(); // Emp√™che toute soumission de formulaire par d√©faut
  }, { capture: true }); // Capture pour intercepter l‚Äô√©v√©nement t√¥t (avant d‚Äôautres handlers)

  // --- 1) Normaliser steps en un Array d‚Äôobjets √©tape coh√©rents
  //     - Si steps est un objet { etapeA: {...}, etapeB: {...} } => on produit [{id:"etapeA", ...}, {id:"etapeB", ...}]
  //     - Si steps est un array => on s‚Äôassure que chaque √©l√©ment a un id
  const stepsArr = normalizeSteps(steps);

  // --- Si aucune √©tape, on affiche un message et on sort.
  if (stepsArr.length === 0) {
    mount.innerHTML = "Aucun step √† afficher.";
    return;
  }

  // --- 2) √âtat global de la configuration :
  //     - Objet sans prototype (Object.create(null)) pour √©viter les collisions avec des cl√©s h√©rit√©es.
  //     - Cl√© = field.id, Valeur = saisie/choix utilisateur.
  const selection = Object.create(null);

  // --- 3) Index de l‚Äô√©tape courante (born√© entre 0 et stepsArr.length - 1)
  let current = clamp(startAt, 0, stepsArr.length - 1);

  // --- 4) R√©cup√©ration des conteneurs DOM (layout pr√©sum√© existant dans index.html)
  const $previewContainer = document.getElementById("cfg-preview");
  const $sidebarContainer = document.getElementById("cfg-steps");
  const $fieldsContainer  = document.getElementById("cfg-fields");
  const $navContainer     = document.getElementById("cfg-nav");

  // --- V√©rification que tous les conteneurs sont l√† (sinon on ne peut pas rendre l‚ÄôUI)
  if (!$previewContainer || !$sidebarContainer || !$fieldsContainer || !$navContainer) {
    throw new Error("‚ùå Conteneurs manquants (#cfg-preview, #cfg-steps, #cfg-fields, #cfg-nav). V√©rifie index.html.");
  }

  // --- On nettoie ces conteneurs
  $previewContainer.innerHTML = "";
  $sidebarContainer.innerHTML = "";
  $fieldsContainer.innerHTML  = "";
  $navContainer.innerHTML     = "";

  // --- On nettoie √©galement le mount si tu veux encapsuler une structure diff√©rente
  mount.innerHTML = "";

  // --- On fabrique une petite structure racine interne (optionnelle)
  //     Note : tu peux t‚Äôen passer si ton index.html contient d√©j√† toute la structure.
  const $root = el("div", { class: "cfg-root" });
  const $sidebar = el("aside", { class: "cfg-steps" });
  const $main = el("main", { class: "cfg-main" });
  const $nav = el("div", { class: "cfg-nav" });

  $root.appendChild($sidebar);
  $root.appendChild($main);
  $root.appendChild($nav);

  mount.appendChild($root);

  // ---------- Contexte (ctx) partag√© entre les renderers ----------
  // Helpers de visibilit√©
  const predicates = makePredicates({
    selection, stepsArr, data,
    getCurrentIndex: () => current
  });

  // ctx = toutes les fonctions/√©tats dont les renderers ont besoin
  const ctx = {
    selection,
    data,
    stepsArr,

    // index courant + mutateurs
    getCurrentIndex: () => current,
    setCurrentIndex: (i) => { current = clamp(i, 0, stepsArr.length - 1); },

    // --- üÜï Gestion des erreurs "requis manquants" (UX conviviale)
    invalidFields: new Set(),               // Set<string> des field.id invalides
    requiredErrorMessage: "",               // message bandeau (string)

    setRequiredErrors(ids, message) {       // appel√© quand on veut afficher les erreurs
      this.invalidFields = new Set(ids);
      this.requiredErrorMessage = message || "";
    },
    clearRequiredErrors() {                 // appel√© quand on corrige ou on change d'√©tape
      this.invalidFields.clear();
      this.requiredErrorMessage = "";
    },

    // visibilit√© step/field (utilise resolvePredicate)
    isStepVisible: (step) => predicates.stepVisible(step, resolvePredicate),
    shouldShowField: (field) => predicates.fieldVisible(field, resolvePredicate),

    // efface les s√©lections des steps suivants
    clearSelectionsBeyond: (step, { preserve = [] } = {}) => {
      const idx = stepsArr.indexOf(step);
      for (let i = idx + 1; i < stepsArr.length; i++) {
        for (const f of stepsArr[i].fields ?? []) {
          if (preserve.includes(f.id)) continue;
          delete selection[f.id];
        }
      }
    },

    // completude : tous les champs visibles sont remplis si required
    isStepComplete: (step) => {
      const fields = (step.fields ?? []).filter(f => ctx.shouldShowField(f));
      return fields.every(f =>
        !f.required || (selection[f.id] !== undefined && selection[f.id] !== "" && selection[f.id] !== null)
      );
    },

    // utilitaire central pour rerendre tout d‚Äôun coup
    rerenderAll: () => {
      renderSidebar({ containers, ctx });
      renderStep({ containers, ctx });
      renderNav({ containers, ctx });
    }
  };

  // Conteneurs group√©s (plus simple √† passer aux renderers)
  const containers = {
    mount,
    $previewContainer,
    $sidebarContainer,
    $fieldsContainer,
    $navContainer
  };

  // --- Rendu initial : sidebar + step + nav
  ctx.rerenderAll();
}

/**
 * Petit utilitaire export√© pour r√©cup√©rer un param√®tre d‚ÄôURL.
 * - Utile c√¥t√© bootstrap.js pour s√©lectionner un dataset via ?code=...
 */
export function getQueryParam(name) {
  const p = new URLSearchParams(location.search); // Analyse la query string
  return p.get(name);                              // Retourne la valeur (ou null si absente)
}